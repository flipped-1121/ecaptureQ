name: PR Build and Test (PC, Mac, Linux)

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: Check tag and package.json version
        run: |
          TAG_REF="${GITHUB_REF##*/}"
          echo "Current tag: $TAG_REF"
          PKG_VERSION=$(jq -r .version package.json)
          echo "package.json version: $PKG_VERSION"
          if [[ "$TAG_REF" != "v$PKG_VERSION" ]]; then
            echo "Tag ($TAG_REF) does not match package.json version (v$PKG_VERSION)."
            exit 1
          fi
          echo "Tag and package.json version are consistent."

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y  libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libgtk-3-dev libssl-dev xdg-utils librsvg2-dev libappindicator3-dev  patchelf

      - name: Download and setup eCapture for ${{ matrix.arch }}
        shell: bash
        run: |
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            ECAPTURE_ARCH="amd64"
          else
            ECAPTURE_ARCH="arm64"
          fi
          ECAPTURE_LATEST=$(curl -s https://api.github.com/repos/gojue/ecapture/releases/latest | grep tag_name | cut -d '"' -f 4)
          ECAPTURE_TAR="ecapture-${ECAPTURE_LATEST}-linux-${ECAPTURE_ARCH}.tar.gz"
          ECAPTURE_DIR="ecapture-${ECAPTURE_LATEST}-linux-${ECAPTURE_ARCH}"

          wget "https://github.com/gojue/ecapture/releases/download/${ECAPTURE_LATEST}/${ECAPTURE_TAR}"
          tar -zxvf "${ECAPTURE_TAR}"

          mkdir -p ecaptureQ/src-tauri/binaries
          cp "${ECAPTURE_DIR}/ecapture" ecaptureQ/src-tauri/binaries/linux_ecapture_test

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Node.js setup
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.4'  # 尝试稳定版本
          cache: ''  # 禁用缓存

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Check Node.js version
        run: |
          node -v
          npm -v
          pnpm -v

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: pr-${{ github.event.number }}-${{ github.sha }}
          releaseName: 'PR #${{ github.event.number }} Build'
          releaseBody: |
            This is an automated build for PR #${{ github.event.number }}.
            
            **Changes in this PR:**
            ${{ github.event.pull_request.body }}
            
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.head_ref }}
          releaseDraft: true
          prerelease: true
          includeDebug: false
          includeRelease: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}-pr${{ github.event.number }}
          path: |
            src-tauri/target/release/bundle/
            !src-tauri/target/release/bundle/**/debug/
          retention-days: 7

  comment-pr:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            let comment = `## 🔨 PR Build Results\n\n`;
            
            if (artifacts.artifacts.length > 0) {
              comment += `✅ Build completed successfully!\n\n`;
              comment += `### 📦 Download Artifacts:\n`;
            
              for (const artifact of artifacts.artifacts) {
                const platform = artifact.name.includes('macos') ? '🍎 macOS' : 
                                artifact.name.includes('ubuntu') ? '🐧 Linux' : 
                                artifact.name.includes('windows') ? '🪟 Windows' : '📱 Unknown';
                comment += `- ${platform}: [${artifact.name}](${artifact.archive_download_url})\n`;
              }
            
              comment += `\n💡 **How to test:**\n`;
              comment += `1. Download the artifact for your platform\n`;
              comment += `2. Extract the archive\n`;
              comment += `3. Install/run the application\n`;
              comment += `4. Report any issues in this PR\n\n`;
              comment += `⏰ Artifacts will be available for 7 days.\n`;
            } else {
              comment += `❌ Build failed. Please check the workflow logs for details.\n`;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔨 PR Build Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }