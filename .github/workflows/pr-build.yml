name: PR Build and Test (PC, Mac, Linux)

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

# 授予工作流写入权限，用于创建 Release 和上传产物
permissions:
  contents: write

# 定义环境变量
env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

# 确保每个提交只运行一次工作流
concurrency:
  group: "${{ github.workflow }} - ${{ github.head_ref || github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # 任务 1: 检查 Git Tag 和 package.json 的版本是否一致
  check_tag_version:
    name: Check Release Tag and package.json Version Consistency
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check tag and package.json version
        id: get_version
        run: |
          TAG_REF="${GITHUB_REF##*/}"
          echo "Current tag: $TAG_REF"
          PKG_VERSION=$(jq -r .version package.json)
          echo "package.json version: $PKG_VERSION"
          if [[ "$TAG_REF" != "v$PKG_VERSION" ]]; then
            echo "Tag ($TAG_REF) does not match package.json version (v$PKG_VERSION)."
            exit 1
          fi
          echo "Tag and package.json version are consistent."
          echo "version=${PKG_VERSION}" >> $GITHUB_OUTPUT

  # 任务 2: 为 Windows, macOS, Linux, 和 Android 构建和发布
  release:
    name: Build and Release
    needs: check_tag_version
    strategy:
      fail-fast: false
      matrix:
        # 定义需要构建的平台和架构
        include:
          # Windows
          - os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
            arch: x86_64
          - os: windows-latest
            platform: windows
            target: aarch64-pc-windows-msvc
            arch: aarch64
          # macOS
          - os: macos-latest
            platform: macos
            target: aarch64-apple-darwin
            arch: aarch64
          - os: macos-latest
            platform: macos
            target: x86_64-apple-darwin
            arch: x86_64
          # Linux
          - os: ubuntu-22.04
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: x86_64
          - os: ubuntu-22.04
            platform: linux
            target: aarch64-unknown-linux-gnu
            arch: aarch64
          # Android
          - os: ubuntu-22.04
            platform: android
            target: aarch64-linux-android
            arch: aarch64
          - os: ubuntu-22.04
            platform: android
            target: x86_64-linux-android
            arch: x86_64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 安装 Rust Stable
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      # 添加 Rust 编译目标
      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      # Rust 缓存
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      # 仅在 Ubuntu 上安装依赖
      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y  libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libgtk-3-dev libssl-dev xdg-utils librsvg2-dev libappindicator3-dev  patchelf

      # 仅为 Android 平台安装额外的依赖
      - name: Install Android dependencies (android only)
        if: matrix.platform == 'android'
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk

      # 设置 Node.js 环境
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      
      # 设置 pnpm
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      # 安装前端依赖
      - name: Pnpm install
        run: pnpm i

      # Tauri 构建
      - name: Tauri build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.ANDROID_SIGNING_DEBUG_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_DEBUG_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          ANDROID_KEYSTORE_PATH: ${{ secrets.ANDROID_KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_SIGNING_DEBUG_KEY_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_SIGNING_DEBUG_KEY_ALIAS }}
          ANDROID_KEY_PASS: ${{ secrets.ANDROID_SIGNING_DEBUG_KEY_ALIAS_PASSWORD }}
        with:
          # 使用 `check_tag_version` 任务的输出版本
          tagName: v${{ needs.check_tag_version.outputs.version }}
          releaseName: "Release v${{ needs.check_tag_version.outputs.version }}"
          releaseBody: "Automated release build for all platforms."
          tauriScript: pnpm
          args: --target ${{ matrix.target }}

  # 任务 3: 仅在所有发布任务成功后，才更新发布信息，例如创建更新文件等
  release_update:
    name: Release Update
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install
        run: pnpm i

      - name: Release updater file
        run: pnpm updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}